-- WireShark packet dissector for ZK FingerPrint's packet format
-- @author CsokiCraft
-- Licensed under GPL 2.0 or later

-- Command values
-- Taken from python_zklib (zkconst.py)
-- Generated by zkconst_importer.py
vs_cmds = {
        [1000] = "CMD_CONNECT",
        [1001] = "CMD_EXIT",
        [1002] = "CMD_ENABLEDEVICE",
        [1003] = "CMD_DISABLEDEVICE",
        [1004] = "CMD_RESTART",
        [1005] = "CMD_POWEROFF",
        [1006] = "CMD_SLEEP",
        [1007] = "CMD_RESUME",
        [1009] = "CMD_CAPTUREFINGER",
        [1011] = "CMD_TESTTEMP",
        [1012] = "CND_CAPTUREIMAGE",
        [1013] = "CMD_REFRESHDATA",
        [1014] = "CMD_REFRESHOPTION",
        [1017] = "CMD_TESTVOICE",
        [1100] = "CMD_VERSION",
        [1101] = "CND_CHANGESPEED",
        [1102] = "CMD_AUTH",
        [1500] = "CMD_PREPARE_DATA",
        [1501] = "CMD_DATA",
        [1502] = "CMD_FREE_DATA",
        [2000] = "CMD_ACK_OK",
        [2001] = "CMD_ACK_ERROR",
        [2002] = "CMD_ACK_DATA",
        [2005] = "CMD_UDP_OK",
        [7] = "CMD_DB_RRQ",
        [8] = "CMD_SET_USER",
        [9] = "CMD_USERTEMP_RRQ",
        [13] = "CMD_ATTLOG_RRQ",
        [14] = "CMD_CLEAR_DATA",
        [15] = "CMD_CLEAR_ATTLOG",
        [18] = "CMD_DELETEUSER",
        [20] = "CMD_CLEAR_ADMIN",
        [61] = "CMD_STARTENROLL",
        [66] = "CMD_WRITE_LCD",
        [50] = "CMD_GETFREESIZE",
        [500] = "CMD_REG_EVENT",
        [201] = "CMD_GET_TIME",
        [202] = "CMD_SET_TIME",
        [27] = "CMD_TZ_RRQ",
        [28] = "CMD_TZ_WRQ",
        [31] = "CMD_UNLOCK",
        [11] = "CMD_DEVICE",
}

-- WireShark objects
local p_zkfp = Proto("zkfp", "ZKFP packet")

local f_cmd    = ProtoField.uint16("zkfp.cmd"   , "Command"   , base.HEX, vs_cmds)
local f_chksum = ProtoField.uint16("zkfp.chksum", "Checksum"  , base.HEX)
local f_sessid = ProtoField.uint16("zkfp.sessid", "Session ID", base.HEX)
local f_replid = ProtoField.uint16("zkfp.replid", "Reply ID"  , base.HEX)
local f_text   = ProtoField.string("zkfp.text"  , "Text")

p_zkfp.fields = { f_cmd, f_chksum, f_sessid, f_replid, f_text }

p_zkfp.prefs.udp_port=Pref.uint("UDP port", 4370, "UDP port used by ZKFP")

local d_data = Dissector.get("data")

function p_zkfp.dissector(buf, pinfo, tree)
	local t_zkfp=tree:add(p_zkfp, buf())
	t_zkfp:add_le(f_cmd   , buf(0, 2))
	-- TODO: check chksum?
	t_zkfp:add_le(f_chksum, buf(2, 2))
	t_zkfp:add_le(f_sessid, buf(4, 2))
	t_zkfp:add_le(f_replid, buf(6, 2))
	-- TODO: parse buf(8) maybe?
	i_cmd=buf(0, 2):uint()
--	if i_cmd == 11 then
--		t_zkfp:add(f_text, buf(8))
--	else
		d_data:call(buf(8):tvb(), pinfo, t_zkfp)
--	end
end

local udp_encap_table = DissectorTable.get("udp.port")
udp_encap_table:add(p_zkfp.prefs.udp_port, p_zkfp)
